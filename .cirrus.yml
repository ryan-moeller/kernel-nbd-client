freebsd_instance:
  cpu: 8
  memory: 8G

task:
  matrix:
    # No motivation to backport module to 13.5-RELEASE
    #- freebsd_instance:
    #    image_family: freebsd-13-5
    #  env:
    #    ARCHIVES_PATH: releases/amd64/13.5-RELEASE
    - freebsd_instance:
        image_family: freebsd-14-2
      env:
        ARCHIVES_PATH: releases/amd64/14.2-RELEASE
    - freebsd_instance:
        image_family: freebsd-15-0-snap
      env:
        ARCHIVES_PATH: snapshots/amd64/15.0-CURRENT
  name: ${ARCHIVES_PATH}
  env:
    WD: /tmp/wd
    ARCHIVES_BASE: https://download.freebsd.org/${ARCHIVES_PATH}
  build_setup_script:
    - mkdir ${WD}
    - cd ${WD} && fetch -q ${ARCHIVES_BASE}/kernel-dbg.txz
    - tar xf ${WD}/kernel-dbg.txz -C / && rm ${WD}/kernel-dbg.txz
    - cd ${WD} && fetch -q ${ARCHIVES_BASE}/src.txz
    - tar xf ${WD}/src.txz -C / && rm ${WD}/src.txz
    # Check for WITNESS and INVARIANTS and add args for make when present.
    - sysctl -n kern.conftxt
      | sed -nE '/^options\t(WITNESS|INVARIANTS)$/s/options\t/-D/p'
      | xargs -I @ -L 2 echo 'DEBUG_ARGS=DEBUG_FLAGS="-g -O0 @"'
      | tee -a ${CIRRUS_ENV} >&2
  build_script:
    # eval needed for proper variable expansion. Cirrus counts it as an empty
    # arg when empty, but we want no args from it when empty.
    - eval make ${DEBUG_ARGS} clean
    - eval make ${DEBUG_ARGS}
    - eval make ${DEBUG_ARGS} install
  load_script:
    - gnbd load
  ca_info_file:
    path: ${WD}/ca.info
    from_contents: |
      cn = testing nbd client
      ca
      cert_signing_key
  server_info_file:
    path: ${WD}/server.info
    from_contents: |
      organization = testing nbd client
      cn = localhost
      tls_www_server
      encryption_key
      signing_key
  client_info_file:
    path: ${WD}/client.info
    from_contents: |
      country = US
      state = Florida
      locality = Orlando
      organization = testing nbd client
      cn = localhost
      tls_www_client
      encryption_key
      signing_key
  nbdconfig_file:
    path: ${WD}/nbdconfig
    from_contents: |
      [generic]
      cacertfile = ${WD}/cacert.pem
      certfile = ${WD}/servercert.pem
      keyfile = ${WD}/serverkey.pem
  test_setup_script:
    - pkg install -y
      autoconf-archive
      autotools
      bison
      docbook2X
      git-lite
      glib
      gnutls
      pkgconf
    # Certificate Authority
    - certtool --generate-privkey > ${WD}/cakey.pem
    - certtool --generate-self-signed
      --load-privkey ${WD}/cakey.pem
      --template ${WD}/ca.info
      --outfile ${WD}/cacert.pem
    # Server
    - certtool --generate-privkey > ${WD}/serverkey.pem
    - certtool --generate-certificate
      --load-ca-certificate ${WD}/cacert.pem
      --load-ca-privkey ${WD}/cakey.pem
      --load-privkey ${WD}/serverkey.pem
      --template ${WD}/server.info
      --outfile ${WD}/servercert.pem
    # Client
    - certtool --generate-privkey > ${WD}/clientkey.pem
    - certtool --generate-certificate
      --load-ca-certificate ${WD}/cacert.pem
      --load-ca-privkey ${WD}/cakey.pem
      --load-privkey ${WD}/clientkey.pem
      --template ${WD}/client.info
      --outfile ${WD}/clientcert.pem
    # Build a working recent version of nbd-server.
    - git -C ${WD} clone https://github.com/NetworkBlockDevice/nbd.git
    - git -C ${WD}/nbd checkout 7a64238499823456bb83cdbfe6811f5db468b35b
    - git -C ${WD}/nbd apply ${CIRRUS_WORKING_DIR}/nbd.patch
    - cd ${WD}/nbd && ./autogen.sh && ./configure && make
    # Make a memory disk to serve.
    - mdconfig -a -t swap -s 4g
      | xargs -I @ echo MD=@ | tee -a ${CIRRUS_ENV} >&2
  test_server_background_script:
    - ${WD}/nbd/nbd-server 10809 /dev/${MD} -C ${WD}/nbdconfig
  test_connect_notls_script:
    - gnbd connect localhost
      | xargs -I @ echo NBD=@ | tee -a ${CIRRUS_ENV} >&2
  test_notls_script:
    # Test with 1 connection.
    - gnbd status
    - gnbd status | egrep -q "^${NBD}(\s+)"
    - gnbd list
    - gnbd list ${NBD} | egrep -q "^Geom name:(\s+)${NBD}$"
    - gnbd list ${NBD} | egrep -q "^TLS:(\s+)no$"
    - gnbd list ${NBD} | egrep -q "^Connections:(\s+)1$"
    - diskinfo -twic ${NBD}
    # Test with 4 conections (scaling up).
    - gnbd scale -c 4 ${NBD}
    - gnbd list ${NBD} | egrep -q "^Connections:(\s+)4$"
    - diskinfo -twic ${NBD}
    # Test with 2 connections (scaling down).
    - gnbd scale -c 2 ${NBD}
    - gnbd list ${NBD} | egrep -q "^Connections:(\s+)2$"
    - diskinfo -twic ${NBD}
    # Test the lldb script if we're on a debug build.
    - test -z "${DEBUG_ARGS}"
      || lldb -b -o "script dofile 'gnbd.lua'" -c /dev/mem /boot/kernel/kernel
    # Clean up.
    - gnbd disconnect ${NBD}
    # Unset the NBD variable in the env.
    - sed -i '' -e '/^NBD=/d' ${CIRRUS_ENV}
  test_connect_tls_script:
    - sysctl kern.ipc.tls.enable=1
    - gnbd connect
      -A ${WD}/cacert.pem
      -C ${WD}/clientcert.pem
      -K ${WD}/clientkey.pem
      localhost
      | xargs -I @ echo NBD=@ | tee -a ${CIRRUS_ENV} >&2
  test_tls_script:
    # Test with 1 connection.
    - gnbd status
    - gnbd status | egrep -q "^${NBD}(\s+)"
    - gnbd list
    - gnbd list ${NBD} | egrep -q "^Geom name:(\s+)${NBD}$"
    - gnbd list ${NBD} | egrep -q "^TLS:(\s+)yes$"
    - gnbd list ${NBD} | egrep -q "^Connections:(\s+)1$"
    - diskinfo -twic ${NBD}
    # Test with 4 conections (scaling up).
    - gnbd scale -c 4
      -A ${WD}/cacert.pem
      -C ${WD}/clientcert.pem
      -K ${WD}/clientkey.pem
      ${NBD}
    - gnbd list ${NBD} | egrep -q "^Connections:(\s+)4$"
    - diskinfo -twic ${NBD}
    # Test with 2 connections (scaling down).
    - gnbd scale -c 2
      -A ${WD}/cacert.pem
      -C ${WD}/clientcert.pem
      -K ${WD}/clientkey.pem
      ${NBD}
    - gnbd list ${NBD} | egrep -q "^Connections:(\s+)2$"
    - diskinfo -twic ${NBD}
    # Test the lldb script if we're on a debug build.
    - test -z "${DEBUG_ARGS}"
      || lldb -b -o "script dofile 'gnbd.lua'" -c /dev/mem /boot/kernel/kernel
    # Clean up.
    - gnbd disconnect ${NBD}
    # Unset the NBD variable in the env.
    - sed -i '' -e '/^NBD=/d' ${CIRRUS_ENV}
